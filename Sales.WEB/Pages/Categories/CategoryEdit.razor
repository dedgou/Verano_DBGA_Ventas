@page "/categories/edit/{Id:int}"

@using Sales.Shared.Entities
@using Sales.WEB.Repositories
@using System.Net;

@inject SweetAlertService sweetAlertService
@inject IRepository repository
@inject NavigationManager navigationManager

<h3>Editar Categoría</h3>

@if (category is null)
{
    <p>Cargando....</p>
}
else
{
    <CategoryForm @ref="categoryForm" Category="category" OnValidSubmit="EditAsync" ReturnAction="Return"></CategoryForm>
}

@code {
    private Category? category;
    private CategoryForm categoryForm;

    [Parameter]
    public int Id { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<Category>($"/api/categories/{Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/categories");
                return;
            }
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        category = responseHttp.Response;
    }

    private async void EditAsync()
    {
        var responseHttp = await repository.Put("api/categories/", category);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        categoryForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/categories");

    }

    private void Return()
    {
        categoryForm!.FormPostedSuccessfully = true;

        navigationManager.NavigateTo("/categories");
    }
}